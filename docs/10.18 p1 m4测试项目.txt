 M4 Day 1 手动测试清单
✅ 已完成的自动化验证
1. 数据库层验证 ✅
✅ 表 biz_asset_rack 已创建
✅ 8 条测试数据已插入
✅ 字典数据已配置（idc_floor: 4条, asset_rack_status: 3条）
✅ 索引已创建（主键 + 4个索引）
2. 后端服务验证 ✅
✅ Spring Boot 启动成功（端口 8080）
✅ BizAssetRackController 路由已注册
✅ 路由冲突已解决（旧 DcRackController 已禁用）
3. 代码完整性验证 ✅
✅ Controller: 6 个 API 端点
✅ Service: CRUD + 唯一性校验
✅ Mapper: 7 个数据库方法
✅ Domain: 17 个字段
✅ 前端页面: 440 行完整 CRUD 功能
🧪 需要手动测试的功能
前置条件
确保后端服务运行中：http://localhost:8080
启动前端服务：npm run dev（通常是 http://localhost:5173 或 http://localhost:3000）
登录系统（用户名: admin, 密码: admin123）
测试用例 1：列表查询功能 ⭐⭐⭐⭐⭐
访问路径： 导航到 业务管理 → 资产管理 → 机柜管理 预期结果：
✅ 页面正常加载，无错误
✅ 显示数据表格，有 8 条数据
✅ 分页器显示：共 8 条记录
✅ 表格列显示正确：
机柜编号（如：RACK-F1-001）
机柜名称（如：A区1号机柜）
楼层（显示"一楼"而不是"1F"）
房间/区域（如：A区）
总U数（如：42）
已用U数（如：28）
占用率（进度条，绿色/橙色/红色）
状态（标签：在用/停用/退役）
创建时间
操作列（编辑、删除按钮）
检查点：
 楼层显示为"一楼/二楼/三楼/四楼"（不是 1F/2F）
 状态显示为"在用/停用/退役"（不是 active/disabled）
 占用率进度条颜色正确（<70% 绿色，70-89% 橙色，≥90% 红色）
测试用例 2：筛选功能 ⭐⭐⭐⭐
操作步骤：
在"机柜编号"输入框输入 F1
点击"搜索"按钮
预期结果：
✅ 只显示编号包含 "F1" 的机柜（应该有 3 条：RACK-F1-001, RACK-F1-002, RACK-F1-003）
操作步骤 2：
点击"重置"按钮
在"楼层"下拉选择"二楼"
点击"搜索"
预期结果：
✅ 只显示 2F 楼层的机柜（应该有 2 条）
操作步骤 3：
点击"重置"
在"状态"下拉选择"在用"
点击"搜索"
预期结果：
✅ 显示所有状态为 active 的机柜
测试用例 3：排序功能 ⭐⭐⭐⭐
操作步骤：
点击"机柜编号"列头
预期结果：
✅ 数据按机柜编号升序排列
✅ 列头显示向上箭头
操作步骤 2：
再次点击"机柜编号"列头
预期结果：
✅ 数据按机柜编号降序排列
✅ 列头显示向下箭头
测试其他排序列：
 机柜名称排序
 楼层排序
 房间/区域排序
 总U数排序
 状态排序
 创建时间排序（默认降序）
测试用例 4：新增机柜功能 ⭐⭐⭐⭐⭐
操作步骤：
点击"新增"按钮
预期结果：
✅ 弹出对话框，标题为"添加机柜"
✅ 表单显示所有字段
填写数据：
机柜编号：RACK-TEST-001
机柜名称：测试机柜
楼层：一楼
房间/区域：测试区
具体位置：测试位置
总U数：42
已用U数：10
额定功率(kW)：12.5
网络端口数：48
状态：在用
备注：这是一个测试机柜
点击"确定"按钮
预期结果：
✅ 显示"新增成功"提示
✅ 对话框关闭
✅ 列表自动刷新，新数据出现在第一行
✅ 占用率显示为 23%（10/42）
验证数据： 3. 在数据库中检查：
SELECT * FROM biz_asset_rack WHERE rack_no = 'RACK-TEST-001';
测试用例 5：表单验证 ⭐⭐⭐⭐⭐
场景 A：机柜编号唯一性验证 操作步骤：
点击"新增"
填写机柜编号：RACK-F1-001（已存在）
填写其他必填字段
点击"确定"
预期结果：
✅ 显示错误提示："Failed to add rack ..., rack number already exists"
✅ 数据未保存
场景 B：已用U数 > 总U数 验证 操作步骤：
点击"新增"
填写总U数：42
填写已用U数：50
点击"确定"
预期结果：
✅ 显示错误提示："已用U数不能超过总U数"
✅ 数据未保存
场景 C：必填字段验证 操作步骤：
点击"新增"
不填写"机柜编号"
点击"确定"
预期结果：
✅ 显示"机柜编号不能为空"
✅ 表单不提交
场景 D：字段长度验证 操作步骤：
点击"新增"
机柜编号填写 AB（少于3个字符）
失去焦点
预期结果：
✅ 显示"长度在 3 到 50 个字符"
测试用例 6：编辑机柜功能 ⭐⭐⭐⭐⭐
操作步骤：
在列表中找到"RACK-F1-001"
点击"编辑"按钮
预期结果：
✅ 弹出对话框，标题为"修改机柜"
✅ 表单回显所有数据（机柜编号：RACK-F1-001，机柜名称：A区1号机柜，etc.）
修改数据： 3. 修改"机柜名称"为"A区1号机柜（已更新）" 4. 修改"已用U数"为 30 5. 点击"确定" 预期结果：
✅ 显示"修改成功"
✅ 列表刷新，显示更新后的数据
✅ 占用率更新为 71%（30/42，应该显示橙色）
验证唯一性： 6. 再次点击"编辑" 7. 修改机柜编号为 RACK-F1-002（已存在） 8. 点击"确定" 预期结果：
✅ 显示错误："Failed to update rack ..., rack number already exists"
测试用例 7：删除机柜功能 ⭐⭐⭐⭐
操作步骤：
找到测试数据"RACK-TEST-001"
点击"删除"按钮
预期结果：
✅ 弹出确认对话框："是否确认删除机柜编号为"RACK-TEST-001"的数据项？"
点击"确定"
预期结果：
✅ 显示"删除成功"
✅ 列表刷新，该数据消失
验证软删除： 4. 在数据库中检查：
SELECT rack_no, del_flag FROM biz_asset_rack WHERE rack_no = 'RACK-TEST-001';
预期结果：
✅ 数据仍存在，但 del_flag = '1'
测试用例 8：导出功能 ⭐⭐⭐⭐
操作步骤：
点击"导出"按钮
预期结果：
✅ 弹出确认对话框："是否确认导出所有机柜数据？"
点击"确定"
预期结果：
✅ 显示 Loading 提示："正在导出数据，请稍候..."
✅ 浏览器下载一个 Excel 文件：asset_rack_{时间戳}.xlsx
验证 Excel 内容： 3. 打开下载的 Excel 文件 预期结果：
✅ 包含所有机柜数据
✅ 列头正确：机柜编号、机柜名称、楼层、房间/区域、总U数、已用U数、额定功率、网络端口数、状态、备注
✅ 楼层显示为"一楼/二楼"（字典翻译）
✅ 状态显示为"在用/停用/退役"（字典翻译）
测试筛选导出： 4. 在页面上筛选"楼层=一楼" 5. 点击"导出" 预期结果：
✅ 导出的 Excel 只包含一楼的机柜数据
测试用例 9：字典加载失败兜底 ⭐⭐⭐
操作步骤：
打开浏览器开发者工具（F12）→ Network 标签
刷新页面
查看字典加载请求：
/system/dict/data/type/idc_floor
/system/dict/data/type/asset_rack_status
预期结果：
✅ 两个请求都返回 200
✅ 返回数据包含字典项
模拟失败场景（可选）： 4. 在浏览器中阻止字典请求（Network → Block request pattern） 5. 刷新页面 预期结果：
✅ 页面仍然正常显示
✅ 楼层下拉选项显示兜底数据：一楼、二楼、三楼、四楼
✅ 状态下拉选项显示兜底数据：在用、停用、退役
测试用例 10：权限测试 ⭐⭐⭐
操作步骤：
使用非管理员账户登录（如果有）
访问机柜管理页面
预期结果：
✅ 如果无权限，看不到"新增"、"编辑"、"删除"、"导出"按钮
✅ 直接调用 API 返回 403 Forbidden
📊 测试结果汇总表
测试用例	功能	状态	备注
1	列表查询	⏳ 待测试	
2	筛选功能	⏳ 待测试	
3	排序功能	⏳ 待测试	
4	新增机柜	⏳ 待测试	
5	表单验证	⏳ 待测试	
6	编辑机柜	⏳ 待测试	
7	删除机柜	⏳ 待测试	
8	导出功能	⏳ 待测试	
9	字典兜底	⏳ 待测试	
10	权限控制	⏳ 待测试	
🐛 已知问题记录
在测试过程中如发现问题，请记录：
问题描述：
复现步骤：
预期结果：
实际结果：
截图/日志：
✅ 测试完成标准
 所有 10 个测试用例通过
 CRUD 功能正常
 数据验证生效
 字典翻译正常
 导出功能正常
 无 JavaScript 错误
 无 API 报错
现在请执行上述测试，并告诉我测试结果！ 如果遇到任何问题，立即反馈给我。🧪
Update Todos

数据库数据验证

后端 API 路由验证

编写手动测试指南

等待用户执行手动测试
我已经为你准备好了完整的测试清单！现在你可以：
启动前端服务（如果还没启动）
登录系统
按照上面的测试用例逐一测试
如果遇到任何问题，请告诉我：